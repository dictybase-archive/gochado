[create_table_temp_gpad]
    CREATE TEMP TABLE temp_gpad (
           digest varchar(28) NOT NULL,
           id varchar(56) NOT NULL,
           goid varchar(30) NOT NULL,
           publication_id varchar(56) NOT NULL,
           pubplace varchar(28) NOT NULL,
           evidence_code varchar(10) NOT NULL,
           assigned_by varchar(15) NOT NULL,
           rank integer NOT NULL,
           date_curated text NOT NULL
    )

[create_table_temp_gpad_qualifier]
    CREATE TEMP TABLE temp_gpad_qualifier (
        digest varchar(28) NOT NULL,
        rank integer NOT NULL,
        qualifier varchar(15) NOT NULL
    )

[create_table_temp_gpad_reference]
    CREATE TEMP TABLE temp_gpad_reference (
           digest varchar(28) NOT NULL,
           pubplace varchar(28) NOT NULL,
           publication_id varchar(56)
    )


[create_table_temp_gpad_withfrom]
    CREATE TEMP TABLE temp_gpad_withfrom (
           digest varchar(28) NOT NULL,
           rank integer NOT NULL,
           withfrom varchar(56) 
    )

[create_table_temp_gpad_extension]
    CREATE TEMP TABLE temp_gpad_extension (
           digest varchar(28) NOT NULL,
           relationship varchar(30) NOT NULL,
           db varchar(15) NOT NULL,
           id varchar(56) NOT NULL,
           rank integer default 1,
           anon_cvterm varchar(128) default NULL
    )


[create_table_temp_gpad_new]
    CREATE TEMP TABLE temp_gpad_new (
           digest varchar(28) NOT NULL,
           feature_id integer NOT NULL,
           cvterm_id integer NOT NULL,
           rank integer NOT NULL,
           pub_id integer NOT NULL,
           is_update integer NOT NULL default 0
    )

# The GPAD rows that have changed since the last load are inserted from temp_gpad
# to a new staging table(temp_gpad_new). It is calculated based on LEFT JOIN of date value
# column that will have corresponding NULL value for those record that are absent in
# chado feature_cvtermprop table but present in staging(temp_gpad_new) table.
#   Date(feature_cvtermprop.value scoped by cvterm and cv)
# The feature, cvterm, dbxref and pub tables are joined to make sure the corresponding values
# are loaded in chado and also to extract their primary key for insertion in the
# staging table.
[insert_latest_goa_from_staging]
    INSERT INTO temp_gpad_new(digest, feature_id,
        cvterm_id, rank, pub_id)
        SELECT temp_gpad.digest, feature.feature_id, cvterm.cvterm_id,
            temp_gpad.rank, pub.pub_id 
            FROM temp_gpad
            LEFT JOIN 
            (
                SELECT fcvtprop.value FROM
                    feature_cvtermprop fcvtprop
                JOIN cvterm ON
                   cvterm.cvterm_id = fcvtprop.type_id
                JOIN cv ON
                    cv.cv_id = cvterm.cv_id
                WHERE cvterm.name = 'date'
                AND cv.name = $1
            ) dprop ON
            dprop.value = temp_gpad.date_curated
            JOIN dbxref ON
                temp_gpad.goid = dbxref.accession
            JOIN db ON 
                db.db_id = dbxref.db_id
            JOIN cvterm ON
                cvterm.dbxref_id = dbxref.dbxref_id
            JOIN cv ON
                cv.cv_id = cvterm.cv_id
            JOIN feature ON
                feature.uniquename = temp_gpad.id
            JOIN dbxref evxref ON
                evxref.accession = temp_gpad.evidence_code
            JOIN db evdb ON
                evdb.db_id = evxref.db_id
            JOIN cvterm evterm ON
                evterm.dbxref_id = evxref.dbxref_id
            JOIN cv evcv ON
                evcv.cv_id = evterm.cv_id
            JOIN pub ON (
                pub.uniquename = temp_gpad.publication_id
                AND
                pub.pubplace = temp_gpad.pubplace
            )
            WHERE db.name = 'GO'
            AND cv.name IN ('biological_process', 'molecular_function', 'cellular_component')
            AND dprop.value IS NULL
            AND evcv.name = 'eco'
            AND evdb.name = 'ECO'


[count_all_gpads_from_chado]
    SELECT COUNT(fcvt.feature_cvterm_id)
        FROM feature_cvterm fcvt
        JOIN feature ON
            feature.feature_id = fcvt.feature_id
        JOIN cvterm ON
            cvterm.cvterm_id = fcvt.feature_id
        JOIN dbxref ON 
            dbxref.dbxref_id = cvterm.cvterm_id
        JOIN cv ON
            cv.cv_id = cvterm.cv_id
        JOIN db ON
            db.db_id = dbxref.dbxref_id
        JOIN feature_cvtermprop fcvtprop ON
            fcvtprop.feature_cvterm_id = fcvt.feature_cvterm_id
        JOIN cvterm eterm ON
            eterm.cvterm_id = fcvtprop.type_id
        JOIN dbxref evxref ON
            evxref.dbxref_id = eterm.dbxref_id
        JOIN db evdb ON
            evdb.db_id = evxref.dbxref_id
        JOIN cv evcv ON
            evcv.cv_id = eterm.cv_id
        JOIN feature_cvtermprop fcvtprop2 ON
            fcvtprop2.feature_cvterm_id = fcvt.feature_cvterm_id
        WHERE
            cv.name IN ('biological_process', 'molecular_function', 'cellular_component')
            AND db.name = 'GO'
            AND evdb.name = 'ECO'
            AND evcv.name = 'eco'
            AND fcvtprop2.type_id = (
                SELECT cvterm_id FROM cvterm
                    JOIN cv ON
                        cv.cv_id = cvterm.cv_id
                    WHERE cvterm.name = 'assigned_by'
                    AND cv.name = $1
            )

[count_temp_gpad_new_by_checksum]
    SELECT COUNT(*) FROM temp_gpad_new
        WHERE digest = $1


# The SQL statement below selects new GPAD entries since the last load.
# It will select the following columns from staging(temp_gpad_new)
# to create new rows in feature_cvterm
# chado table.
#   feature.feature_id
#   cvterm.cvterm_id
#   pub.pub_id
#   temp_gpad.rank
# The LEFT JOIN is added to skip the annotation that have extensions. For 
# extensions the feature_cvterm relations are created through anonymous
# cvterms.
[insert_feature_cvterm]
    INSERT INTO feature_cvterm(feature_id, cvterm_id, rank, pub_id)
        SELECT tgnew.feature_id, tgnew.cvterm_id,tgnew.rank, tgnew.pub_id 
            FROM temp_gpad_new tgnew
            LEFT JOIN temp_gpad_extension tgext ON
                tgnew.digest = tgext.digest
            WHERE tgnew.is_update = 0
            AND tgext.digest IS NULL

# The feature_cvterm_id comes from joining feature_id and cvterm_id from temp_gpad_new table.
# The type_id comes from joining temp_gpad evidence_code column with the cvterm of eco cv in chado table.
# There is no specific data for value, so it is set to 1
[insert_feature_cvtermprop_evcode]
    INSERT INTO feature_cvtermprop(feature_cvterm_id, type_id, value)
        SELECT fcvt.feature_cvterm_id,cvterm.cvterm_id, 1
            FROM feature_cvterm fcvt 
            JOIN temp_gpad_new ON 
            (
                temp_gpad_new.feature_id = fcvt.feature_id
                AND
                temp_gpad_new.cvterm_id = fcvt.cvterm_id
                AND 
                temp_gpad_new.pub_id = fcvt.pub_id
                AND
                temp_gpad_new.rank = fcvt.rank
            )
            JOIN temp_gpad ON
                temp_gpad.digest = temp_gpad_new.digest
            JOIN dbxref ON
                dbxref.accession = temp_gpad.evidence_code
            JOIN db ON 
                db.db_id = dbxref.db_id
            JOIN cvterm ON
                cvterm.dbxref_id = dbxref.dbxref_id
            JOIN cv ON
                cv.cv_id = cvterm.cv_id
            AND db.name = 'ECO'
            AND cv.name = 'eco'
            AND temp_gpad_new.is_update = 0

# The feature_cvterm_id is identical to previous one. The type_id comes from a custom cv namespace
# exclusive for GPAD. The value and rank comes from temp_gpad_qualifier after joining with temp_gpad_new.
[insert_feature_cvtermprop_qualifier]
    INSERT INTO feature_cvtermprop(feature_cvterm_id, type_id, value, rank)
        SELECT fcvt.feature_cvterm_id,
            (SELECT cvterm_id FROM cvterm JOIN cv 
                ON cv.cv_id = cvterm.cv_id
                WHERE cv.name = $1
                AND cvterm.name = 'qualifier'
            ),
            tgq.qualifier,
            tgq.rank
            FROM feature_cvterm fcvt 
            JOIN temp_gpad_new ON 
            (
                temp_gpad_new.feature_id = fcvt.feature_id
                AND
                temp_gpad_new.cvterm_id = fcvt.cvterm_id
                AND 
                temp_gpad_new.pub_id = fcvt.pub_id
                AND
                temp_gpad_new.rank = fcvt.rank
            )
            JOIN temp_gpad_qualifier tgq ON
                tgq.digest = temp_gpad_new.digest
            WHERE temp_gpad_new.is_update = 0

# The data of value column comes from temp_gpad after joining with temp_gpad_new.
[insert_feature_cvtermprop_date]
    INSERT INTO feature_cvtermprop(feature_cvterm_id, type_id, value)
        SELECT fcvt.feature_cvterm_id,
            (SELECT cvterm_id FROM cvterm JOIN cv 
                ON cv.cv_id = cvterm.cv_id
                WHERE cv.name = $1
                AND cvterm.name = 'date'
            ),
            temp_gpad.date_curated 
            FROM feature_cvterm fcvt 
            JOIN temp_gpad_new ON 
            (
                temp_gpad_new.feature_id = fcvt.feature_id
                AND
                temp_gpad_new.cvterm_id = fcvt.cvterm_id
                AND 
                temp_gpad_new.pub_id = fcvt.pub_id
                AND
                temp_gpad_new.rank = fcvt.rank
            )
            JOIN temp_gpad ON
                temp_gpad.digest = temp_gpad_new.digest
            WHERE temp_gpad_new.is_update = 0


# The data of value column comes from temp_gpad after joining with temp_gpad_new.
[insert_feature_cvtermprop_assigned_by]
    INSERT INTO feature_cvtermprop(feature_cvterm_id, type_id, value)
        SELECT fcvt.feature_cvterm_id,
            (SELECT cvterm_id FROM cvterm JOIN cv 
                ON cv.cv_id = cvterm.cv_id
                WHERE cv.name = $1
                AND cvterm.name = 'source'
            ),
            temp_gpad.assigned_by 
            FROM feature_cvterm fcvt 
            JOIN temp_gpad_new ON 
            (
                temp_gpad_new.feature_id = fcvt.feature_id
                AND
                temp_gpad_new.cvterm_id = fcvt.cvterm_id
                AND 
                temp_gpad_new.pub_id = fcvt.pub_id
                AND
                temp_gpad_new.rank = fcvt.rank
            )
            JOIN temp_gpad ON
                temp_gpad.digest = temp_gpad_new.digest
            WHERE temp_gpad_new.is_update = 0

[insert_feature_cvtermprop_withfrom]
    INSERT INTO feature_cvtermprop(feature_cvterm_id, type_id, value, rank)
        SELECT fcvt.feature_cvterm_id,
            (SELECT cvterm_id FROM cvterm JOIN cv 
                ON cv.cv_id = cvterm.cv_id
                WHERE cv.name = $1
                AND cvterm.name = 'with'
            ),
            tgw.withfrom,
            tgw.rank
            FROM feature_cvterm fcvt 
            JOIN temp_gpad_new ON 
            (
                temp_gpad_new.feature_id = fcvt.feature_id
                AND
                temp_gpad_new.cvterm_id = fcvt.cvterm_id
                AND 
                temp_gpad_new.pub_id = fcvt.pub_id
                AND
                temp_gpad_new.rank = fcvt.rank
            )
            JOIN temp_gpad_withfrom tgw ON
                tgw.digest = temp_gpad_new.digest
            WHERE temp_gpad_new.is_update = 0

[insert_feature_cvterm_pub_reference]
    INSERT INTO feature_cvterm_pub(feature_cvterm_id,pub_id)
        SELECT fcvt.feature_cvterm_id,pub.pub_id
            FROM feature_cvterm fcvt 
            JOIN temp_gpad_new ON 
            (
                temp_gpad_new.feature_id = fcvt.feature_id
                AND
                temp_gpad_new.cvterm_id = fcvt.cvterm_id
                AND 
                temp_gpad_new.pub_id = fcvt.pub_id
                AND
                temp_gpad_new.rank = fcvt.rank
            )
            JOIN temp_gpad_reference ON
                temp_gpad_reference.digest = temp_gpad_new.digest
            JOIN pub ON (
                pub.uniquename = temp_gpad_reference.publication_id
                AND
                pub.pubplace = temp_gpad_reference.pubplace
            )
            WHERE temp_gpad_new.is_update = 0


#  ------------------
# anonymous cvterm and related CRUD statements
# works with record having annotation extentions column
[insert_anon_cvterm_in_dbxref]
    INSERT INTO dbxref(accession, db_id)
        SELECT tgext.anon_cvterm, (
            SELECT db_id FROM db 
                WHERE db.name = $1
        )
            FROM temp_gpad_extension tgext
            WHERE tgext.anon_cvterm is NOT NULL

[insert_anon_cvterm]
    INSERT INTO cvterm(name, dbxref_id, cv_id)
        SELECT tgext.anon_cvterm, dbxref.dbxref_id, (
            SELECT cv_id FROM cv
                WHERE cv.name = $1
        )
            FROM temp_gpad_extension tgext
            JOIN dbxref ON 
                dbxref.accession = tgext.anon_cvterm
            JOIN db ON
                db.db_id = dbxref.db_id
            WHERE db.name = $2

# cvterm relation between anon and the primary GO term.
[insert_anon_cvterm_rel_original]
    INSERT INTO cvterm_relationship(subject_id,object_id,type_id)
        SELECT subject.cvterm_id,tgnew.cvterm_id, (
            SELECT cvterm.cvterm_id FROM cvterm
                JOIN cv ON cv.cv_id = cvterm.cv_id
                WHERE cv.name = $1
                AND cvterm.name = 'is_a'
        )
            FROM cvterm subject
            JOIN temp_gpad_extension tgext ON
                tgext.anon_cvterm = subject.name
            JOIN dbxref sxref ON (
                sxref.dbxref_id = subject.dbxref_id
                AND
                sxref.accession = tgext.anon_cvterm
            )
            JOIN cv scv ON
                scv.cv_id = subject.cv_id
            JOIN temp_gpad_new tgnew ON
                tgnew.digest = tgext.digest
            WHERE scv.name = $2

# This relationship is created for annotation extentions that have
# ontology term as identifier
[insert_anon_cvterm_rel_extension]
    INSERT INTO cvterm_relationship(subject_id,object_id,type_id)
        SELECT subject.cvterm_id,evterm.cvterm_id,rterm.cvterm_id 
            FROM cvterm subject
            JOIN temp_gpad_extension tgext ON
                tgext.anon_cvterm = subject.name
            JOIN dbxref sxref ON (
                sxref.dbxref_id = subject.dbxref_id
                AND
                sxref.accession = tgext.anon_cvterm
            )
            JOIN cv scv ON
                scv.cv_id = subject.cv_id
            JOIN dbxref exref ON 
                exref.accession = tgext.id
            JOIN cvterm evterm ON
                evterm.dbxref_id = exref.dbxref_id
            JOIN db edb ON (
                edb.db_id = exref.db_id
                AND
                tgext.db = edb.name
            )
            JOIN cvterm rterm ON
                rterm.name = tgext.relationship
            JOIN cv rcv ON
                rcv.cv_id = rterm.cv_id
            WHERE scv.name = $1
            AND rcv.name = 'go/extensions/gorel'

# In case of a database/sequence identifier in annotation extension the db has
# to be created if not present in chado
[insert_anon_cvterm_db_identifier]
    INSERT INTO db(name)
        SELECT tgext.db 
        FROM temp_gpad_extension tgext
        LEFT JOIN db ON
            db.name = tgext.db
        WHERE db.name IS NULL

# In case of a database/sequence identifier in annotation extension the dbxref has
# to be created if not present in chado
[insert_anon_cvterm_dbxref_identifier]
    INSERT INTO dbxref(accession, db_id)
        SELECT tgext.id,db.db_id 
        FROM temp_gpad_extension tgext
        JOIN db ON
            db.name = tgext.db
        LEFT JOIN dbxref ON
            dbxref.accession = tgext.id
        WHERE dbxref.accession IS NULL

# This cvterm property is created for annotation extentions that have
# database/sequence accession as identifier
# The two LEFT JOINs are to make sure these are database identifier
# These identifiers do have to exist in chado and two earlier statements
# make sure of that.
[insert_anon_cvtermprop_extension]
    INSERT INTO cvtermprop(cvterm_id, type_id, value)
        SELECT subject.cvterm_id,rterm.cvterm_id,
            tgext.db || ':' || tgext.id
        FROM cvterm subject
        JOIN temp_gpad_extension tgext ON
            tgext.anon_cvterm = subject.name
        JOIN dbxref sxref ON (
            sxref.dbxref_id = subject.dbxref_id
            AND
            sxref.accession = tgext.anon_cvterm
        )
        JOIN dbxref exref ON 
            exref.accession = tgext.id
        JOIN db edb ON
            edb.name = tgext.db
        LEFT JOIN cvterm evterm ON
            evterm.dbxref_id = exref.dbxref_id
        JOIN cv scv ON
            scv.cv_id = subject.cv_id
        JOIN cvterm rterm ON
            rterm.name = tgext.relationship
        JOIN cv rcv ON
            rcv.cv_id = rterm.cv_id
        WHERE rcv.name = 'go/extensions/gorel'
        AND scv.name = $1
        AND evterm.dbxref_id IS NULL

# To create feature_cvterm entries of anon cvterms
[insert_anon_feature_cvterm]
    INSERT INTO feature_cvterm(cvterm_id,feature_id,pub_id,rank)
        SELECT cvterm.cvterm_id, tgnew.feature_id, 
            tgnew.pub_id, tgext.rank
            FROM temp_gpad_extension tgext
            JOIN cvterm ON
                cvterm.name = tgext.anon_cvterm
            JOIN cv ON
                cv.cv_id = cvterm.cv_id
            JOIN temp_gpad_new tgnew ON
                tgnew.digest = tgext.digest
        WHERE cv.name = $1
        AND tgext.anon_cvterm IS NOT NULL

# The feature_cvterm_id comes from joining four columns of feature_cvterm with temp_gpad_new and temp_gpad_extension
# tables. The type_id comes from joining temp_gpad evidence_code column with the cvterm of eco cv in chado table.
# There is no specific data for value, so it is set to 1
[insert_anon_feature_cvtermprop_evcode]
    INSERT INTO feature_cvtermprop(feature_cvterm_id, type_id, value)
        SELECT fcvt.feature_cvterm_id, evterm.cvterm_id, 1
            FROM feature_cvterm fcvt 
            JOIN temp_gpad_new tgnew ON ( 
                tgnew.feature_id = fcvt.feature_id
                AND
                tgnew.pub_id = fcvt.pub_id
            )
            JOIN temp_gpad_extension tgext ON (
                tgext.digest = tgnew.digest
                AND
                tgext.rank = fcvt.rank
            )
            JOIN cvterm ON (
                cvterm.name = tgext.anon_cvterm
                AND
                cvterm.cvterm_id = fcvt.cvterm_id
            )
            JOIN cv ON
                cv.cv_id = cvterm.cv_id
            JOIN temp_gpad ON
                temp_gpad.digest = tgext.digest
            JOIN dbxref evxref ON
                evxref.accession = temp_gpad.evidence_code
            JOIN db edb ON 
                edb.db_id = evxref.db_id
            JOIN cvterm evterm ON
                evterm.dbxref_id = evxref.dbxref_id
            JOIN cv ecv ON
                ecv.cv_id = evterm.cv_id
            WHERE cv.name = $1
            AND edb.name = 'ECO'
            AND ecv.name = 'eco'
            AND tgnew.is_update = 0

# The feature_cvterm_id is identical to previous one. The type_id comes from a custom cv namespace
# exclusive for GPAD. The value and rank comes from temp_gpad_qualifier after joining with temp_gpad_new.
[insert_anon_feature_cvtermprop_qualifier]
    INSERT INTO feature_cvtermprop(feature_cvterm_id, type_id, value, rank)
        SELECT fcvt.feature_cvterm_id,
            (SELECT cvterm_id FROM cvterm JOIN cv 
                ON cv.cv_id = cvterm.cv_id
                WHERE cv.name = $1
                AND cvterm.name = 'qualifier'
            ),
            tgq.qualifier,
            tgq.rank
            FROM feature_cvterm fcvt 
            JOIN temp_gpad_new tgnew ON ( 
                tgnew.feature_id = fcvt.feature_id
                AND
                tgnew.pub_id = fcvt.pub_id
            )
            JOIN temp_gpad_extension tgext ON (
                tgext.digest = tgnew.digest
                AND
                tgext.rank = fcvt.rank
            )
            JOIN cvterm ON (
                cvterm.name = tgext.anon_cvterm
                AND
                cvterm.cvterm_id = fcvt.cvterm_id
            )
            JOIN cv ON
                cv.cv_id = cvterm.cv_id
            JOIN temp_gpad_qualifier tgq ON
                tgq.digest = tgext.digest
            WHERE cv.name = $2
            AND tgnew.is_update = $3

# The data of value column comes from temp_gpad after joining with temp_gpad_new.
[insert_anon_feature_cvtermprop_date]
    INSERT INTO feature_cvtermprop(feature_cvterm_id, type_id, value)
        SELECT fcvt.feature_cvterm_id,
            (SELECT cvterm_id FROM cvterm JOIN cv 
                ON cv.cv_id = cvterm.cv_id
                WHERE cv.name = $1
                AND cvterm.name = 'date'
            ),
            temp_gpad.date_curated
            FROM feature_cvterm fcvt 
            JOIN temp_gpad_new tgnew ON ( 
                tgnew.feature_id = fcvt.feature_id
                AND
                tgnew.pub_id = fcvt.pub_id
            )
            JOIN temp_gpad_extension tgext ON (
                tgext.digest = tgnew.digest
                AND
                tgext.rank = fcvt.rank
            )
            JOIN cvterm ON (
                cvterm.name = tgext.anon_cvterm
                AND
                cvterm.cvterm_id = fcvt.cvterm_id
            )
            JOIN cv ON
                cv.cv_id = cvterm.cv_id
            JOIN temp_gpad ON
                temp_gpad.digest = tgext.digest
            WHERE cv.name = $2
            AND tgnew.is_update = $3

[insert_anon_feature_cvtermprop_withfrom]
    INSERT INTO feature_cvtermprop(feature_cvterm_id, type_id, value, rank)
        SELECT fcvt.feature_cvterm_id,
            (SELECT cvterm_id FROM cvterm JOIN cv 
                ON cv.cv_id = cvterm.cv_id
                WHERE cv.name = $1
                AND cvterm.name = 'with'
            ),
            tgw.withfrom,
            tgw.rank
            FROM feature_cvterm fcvt 
            JOIN temp_gpad_new tgnew ON ( 
                tgnew.feature_id = fcvt.feature_id
                AND
                tgnew.pub_id = fcvt.pub_id
            )
            JOIN temp_gpad_extension tgext ON (
                tgext.digest = tgnew.digest
                AND
                tgext.rank = fcvt.rank
            )
            JOIN cvterm ON (
                cvterm.name = tgext.anon_cvterm
                AND
                cvterm.cvterm_id = fcvt.cvterm_id
            )
            JOIN cv ON
                cv.cv_id = cvterm.cv_id
            JOIN temp_gpad_withfrom tgw ON
                tgw.digest = tgext.digest
            WHERE cv.name = $2
            AND tgnew.is_update = $3

# The data of value column comes from temp_gpad after joining with temp_gpad_new.
[insert_anon_feature_cvtermprop_assigned_by]
    INSERT INTO feature_cvtermprop(feature_cvterm_id, type_id, value)
        SELECT fcvt.feature_cvterm_id,
            (SELECT cvterm_id FROM cvterm JOIN cv 
                ON cv.cv_id = cvterm.cv_id
                WHERE cv.name = $1
                AND cvterm.name = 'source'
            ),
            temp_gpad.assigned_by
            FROM feature_cvterm fcvt 
            JOIN temp_gpad_new tgnew ON ( 
                tgnew.feature_id = fcvt.feature_id
                AND
                tgnew.pub_id = fcvt.pub_id
            )
            JOIN temp_gpad_extension tgext ON (
                tgext.digest = tgnew.digest
                AND
                tgext.rank = fcvt.rank
            )
            JOIN cvterm ON (
                cvterm.name = tgext.anon_cvterm
                AND
                cvterm.cvterm_id = fcvt.cvterm_id
            )
            JOIN cv ON
                cv.cv_id = cvterm.cv_id
            JOIN temp_gpad ON
                temp_gpad.digest = tgext.digest
            WHERE cv.name = $2
            AND tgnew.is_update = $3
            

[insert_anon_feature_cvterm_pub_reference]
    INSERT INTO feature_cvterm_pub(feature_cvterm_id,pub_id)
        SELECT fcvt.feature_cvterm_id,pub.pub_id
            FROM feature_cvterm fcvt 
            JOIN temp_gpad_new tgnew ON ( 
                tgnew.feature_id = fcvt.feature_id
                AND
                tgnew.pub_id = fcvt.pub_id
            )
            JOIN temp_gpad_extension tgext ON (
                tgext.digest = tgnew.digest
                AND
                tgext.rank = fcvt.rank
            )
            JOIN cvterm ON (
                cvterm.name = tgext.anon_cvterm
                AND
                cvterm.cvterm_id = fcvt.cvterm_id
            )
            JOIN cv ON
                cv.cv_id = cvterm.cv_id
            JOIN temp_gpad_reference ON
                temp_gpad_reference.digest = tgext.digest
            JOIN pub ON (
                pub.uniquename = temp_gpad_reference.publication_id
                AND
                pub.pubplace = temp_gpad_reference.pubplace
            )
            WHERE cv.name = $1
            AND tgnew.is_update = $2

[update_temp_with_anon_cvterm]
    UPDATE temp_gpad_extension 
        SET anon_cvterm = $1
        WHERE digest = $2
        AND id = $3
        AND db = $4
        AND relationship = $5

# - anon cvterm related sql statements ends here

[update_temp_gpad_new_by_checksum]
    UPDATE temp_gpad_new
        SET is_update = 1
        WHERE digest = $1

[select_anon_cvterm]
        SELECT ot.name || ' [' || tgext.relationship || '] ' || 
            CASE
                WHEN cvterm.cvterm_id IS NULL THEN db.name || ':' || dbxref.accession
                ELSE cvterm.name 
            END AS name, 
            tgext.digest,tgext.id,tgext.db,tgext.relationship
            FROM temp_gpad_new tgnew
            JOIN temp_gpad_extension tgext ON
                tgext.digest = tgnew.digest
            JOIN cvterm ot ON
                ot.cvterm_id = tgnew.cvterm_id
            JOIN dbxref ON
                dbxref.accession = tgext.id
            JOIN db ON (
                db.db_id = dbxref.db_id
                AND
                db.name = tgext.db
            )
            LEFT JOIN cvterm ON
                cvterm.dbxref_id = dbxref.dbxref_id
            WHERE tgnew.is_update = 0

[select_all_gpads_from_chado]
    SELECT feature.uniquename dbid, dbxref.accession goid, 
        evxref.accession evcode, fcvtprop2.value
        FROM feature_cvterm fcvt
        JOIN feature ON
            feature.feature_id = fcvt.feature_id
        JOIN cvterm ON
            cvterm.cvterm_id = fcvt.cvterm_id
        JOIN dbxref ON 
            dbxref.dbxref_id = cvterm.dbxref_id
        JOIN cv ON
            cv.cv_id = cvterm.cv_id
        JOIN db ON
            db.db_id = dbxref.db_id
        JOIN feature_cvtermprop fcvtprop ON
            fcvtprop.feature_cvterm_id = fcvt.feature_cvterm_id
        JOIN cvterm eterm ON
            eterm.cvterm_id = fcvtprop.type_id
        JOIN dbxref evxref ON
            evxref.dbxref_id = eterm.dbxref_id
        JOIN db evdb ON
            evdb.db_id = evxref.db_id
        JOIN cv evcv ON
            evcv.cv_id = eterm.cv_id
        JOIN feature_cvtermprop fcvtprop2 ON
            fcvtprop2.feature_cvterm_id = fcvt.feature_cvterm_id
        JOIN cvterm aterm ON
            aterm.cvterm_id = fcvtprop2.type_id
        JOIN cv acv ON
            acv.cv_id = aterm.cv_id
        WHERE
            cv.name IN ('biological_process', 'molecular_function', 'cellular_component')
            AND db.name = 'GO'
            AND evdb.name = 'ECO'
            AND evcv.name = 'eco'
            AND aterm.name = "source"
            AND acv.name = $1

[delete_feature_cvtermprop_qualifier]
    DELETE FROM feature_cvtermprop
        WHERE type_id =
            (SELECT cvterm_id FROM cvterm JOIN cv 
                ON cv.cv_id = cvterm.cv_id
                WHERE cv.name = $1
                AND cvterm.name = 'qualifier'
            )
        AND feature_cvterm_id IN (
            SELECT feature_cvterm_id
            FROM feature_cvterm fcvt 
            JOIN temp_gpad_new ON 
            (
                temp_gpad_new.feature_id = fcvt.feature_id
                AND
                temp_gpad_new.cvterm_id = fcvt.cvterm_id
                AND 
                temp_gpad_new.pub_id = fcvt.pub_id
                AND
                temp_gpad_new.rank = fcvt.rank
            )
            JOIN temp_gpad_qualifier ON
                temp_gpad_qualifier.digest = temp_gpad_new.digest
            WHERE temp_gpad_new.is_update = 1
        )

[delete_feature_cvtermprop_withfrom]
    DELETE FROM feature_cvtermprop
        WHERE type_id =
            (SELECT cvterm_id FROM cvterm JOIN cv 
                ON cv.cv_id = cvterm.cv_id
                WHERE cv.name = $1
                AND cvterm.name = 'withfrom'
            )
        AND feature_cvterm_id IN (
            SELECT feature_cvterm_id
            FROM feature_cvterm fcvt 
            JOIN temp_gpad_new ON 
            (
                temp_gpad_new.feature_id = fcvt.feature_id
                AND
                temp_gpad_new.cvterm_id = fcvt.cvterm_id
                AND 
                temp_gpad_new.pub_id = fcvt.pub_id
                AND
                temp_gpad_new.rank = fcvt.rank
            )
            JOIN temp_gpad_withfrom ON
                temp_gpad_withfrom.digest = temp_gpad_new.digest
            WHERE temp_gpad_new.is_update = 1

[delete_feature_cvterm_pub]
    DELETE FROM feature_cvterm_pub
        WHERE feature_cvterm_id IN (
        SELECT fcvt.feature_cvterm_id
            FROM feature_cvterm fcvt 
            JOIN temp_gpad_new ON 
            (
                temp_gpad_new.feature_id = fcvt.feature_id
                AND
                temp_gpad_new.cvterm_id = fcvt.cvterm_id
                AND 
                temp_gpad_new.pub_id = fcvt.pub_id
                AND
                temp_gpad_new.rank = fcvt.rank
            )
            JOIN temp_gpad_reference ON
                temp_gpad_reference.digest = temp_gpad_new.digest
            JOIN pub ON (
                pub.uniquename = temp_gpad_reference.publication_id
                AND
                pub.pubplace = temp_gpad_reference.pubplace
            )
            WHERE temp_gpad_new.is_update = 1
        )
