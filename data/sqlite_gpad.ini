[create_table_temp_gpad]
    CREATE TEMP TABLE temp_gpad (
           digest varchar(28) NOT NULL,
           id varchar(56) NOT NULL,
           goid varchar(30) NOT NULL,
           publication_id varchar(56) NOT NULL,
           pubplace varchar(28) NOT NULL,
           evidence_code varchar(10) NOT NULL,
           assigned_by varchar(15) NOT NULL,
           rank integer NOT NULL,
           date_curated text NOT NULL
    )

[create_table_temp_gpad_qualifier]
    CREATE TEMP TABLE temp_gpad_qualifier (
        digest varchar(28) NOT NULL,
        rank integer NOT NULL,
        qualifier varchar(15) NOT NULL
    )

[create_table_temp_gpad_reference]
    CREATE TEMP TABLE temp_gpad_reference (
           digest varchar(28) NOT NULL,
           pubplace varchar(28) NOT NULL,
           publication_id varchar(56)
    )


[create_table_temp_gpad_withfrom]
    CREATE TEMP TABLE temp_gpad_withfrom (
           digest varchar(28) NOT NULL,
           rank integer NOT NULL,
           withfrom varchar(56) 
    )

[create_table_temp_gpad_extension]
    CREATE TEMP TABLE temp_gpad_extension (
           digest varchar(28) NOT NULL,
           relationship varchar(30) NOT NULL,
           db varchar(15) NOT NULL,
           id varchar(56) NOT NULL
    )


[create_table_temp_gpad_new]
    CREATE TEMP TABLE temp_gpad_new (
           digest varchar(28) NOT NULL,
           feature_id integer NOT NULL,
           cvterm_id integer NOT NULL,
           rank integer NOT NULL,
           pub_id integer NOT NULL,
           is_update integer NOT NULL default 0
    )


# The rows that are exclusive in staging table(temp_gpad) are inserted
# into a new staging table(temp_gpad_new). It is calculated based on LEFT JOIN which creates NULL
# column in the joined resultset. For LEFT join the following columns are use 
#   Unique database identifier(feature.uniquename)
#   GO id(dbxref.accession scoped by GO cvterm and cv)
#   Evidence code(dbxref.accession scoped by cvterm, cv and db)
#   Assigned by(feature_cvtermprop.value scoped by cvterm and cv)
#   Date(feature_cvtermprop.value scoped by cvterm and cv)
# In the inner sub-select we select all required columns along with the 
# unique digest. Then in the outer-select we used the digest column to 
# rejoin with temp_gpad table table to extract value for 
# pub_id, cvterm_id and feature_id. 
# This staging table will be later used for inserting the values of rest of the non-unique
# GPAD columns.
[insert_latest_goa_from_staging]
    INSERT INTO temp_gpad_new(digest, feature_id,
        cvterm_id, rank, pub_id)
        SELECT ngpad.digest, feature.feature_id, cvterm.cvterm_id,
            ngpad.rank, pub.pub_id 
            FROM (SELECT temp_gpad.id,temp_gpad.goid,
                    temp_gpad.rank,temp_gpad.digest
                    FROM cvterm
                    JOIN cv ON
                    cv.cv_id = cvterm.cv_id
                    JOIN dbxref ON 
                    cvterm.dbxref_id = dbxref.dbxref_id
                    JOIN db ON 
                    db.db_id = dbxref.db_id
                    LEFT JOIN temp_gpad ON 
                        temp_gpad.goid = dbxref.accession
                    LEFT JOIN feature ON
                        temp_gpad.id = feature.uniquename
                    LEFT JOIN feature_cvtermprop fcvtprop ON
                        temp_gpad.date_curated = fcvtprop.value
                    JOIN cvterm dterm ON
                        dterm.cvterm_id = fcvtprop.type_id
                    JOIN cv dcv ON
                        dcv.cv_id = dterm.cv_id
                    LEFT JOIN feature_cvtermprop fcvtprop2 ON
                        temp_gpad.assigned_by = fcvtprop2.value
                    JOIN cvterm aterm ON
                        aterm.cvterm_id = fcvtprop2.type_id
                    JOIN cv acv ON
                        acv.cv_id = aterm.cv_id
                    LEFT JOIN dbxref exref ON
                        temp_gpad.evidence_code = exref.accession
                    JOIN db evdb ON
                        evdb.db_id = evxref.db_id
                    JOIN cvterm evterm ON
                        evterm.dbxref_id = exref.dbxref_id
                    JOIN cv evcv ON
                        evcv.cv_id = evterm.cv_id
                    WHERE db.name = 'GO'
                    AND dterm.name = 'date'
                    AND dcv.name  = $1
                    AND aterm.name = 'assigned_by'
                    AND acv.name = $2
                    AND evcv.name = 'eco'
                    AND evdb.name = 'ECO'
                    AND cv.name IN ('biological_process', 'molecular_function', 'cellular_component')
                    AND dbxref.accession is NULL
                    AND feature.uniquename is NULL
                    AND fcvtprop.value IS NULL
                    AND fcvtprop2.value IS NULL) ngpad
                JOIN temp_gpad ON
                    temp_gpad.digest = ngpad.digest
                JOIN pub ON (
                    pub.uniquename = temp_gpad.publication_id
                    AND
                    pub.pubplace = temp_gpad.pubplace
                )
                JOIN feature ON
                    feature.uniquename = ngpad.id
                JOIN cvterm ON
                    cvterm.name = ngpad.goid
                JOIN cv ON
                    cv.cv_id = cvterm.cv_id
                JOIN dbxref ON
                    dbxref.dbxref_id = cvterm.dbxref_id
                JOIN db ON
                    db.db_id = dbxref.db_id
                WHERE db.name = 'GO'
                AND cv.name IN ('biological_process', 'molecular_function', 'cellular_component')


# The SQL statement below selects new GPAD entries since the last load.
# It will select the following columns from staging(temp_gpad_new)
# to create new rows in feature_cvterm
# chado table.
#   feature.feature_id
#   cvterm.cvterm_id
#   pub.pub_id
#   temp_gpad.rank
[insert_feature_cvterm]
    INSERT INTO feature_cvterm(feature_id, cvterm_id, rank, pub_id)
        SELECT feature_id, cvterm_id, rank, pub_id 
            FROM temp_gpad_new

# The feature_cvterm_id comes from joining feature_id and cvterm_id from temp_gpad_new table.
# The type_id comes from joining temp_gpad evidence_code column with the cvterm of eco cv in chado table.
# There is no specific data for value, so it is set to 1
[insert_feature_cvtermprop_evcode]
    INSERT INTO feature_cvtermprop(feature_cvterm_id, type_id, value)
        SELECT fcvt.feature_cvterm_id,cvterm.cvterm_id, 1
            FROM feature_cvterm fcvt 
            JOIN temp_gpad_new ON 
            (
                temp_gpad_new.feature_id = fcvt.feature_id
                AND
                temp_gpad_new.cvterm_id = fcvt.cvterm_id
                AND 
                temp_gpad_new.pub_id = fcvt.pub_id
                AND
                temp_gpad_new.rank = fcvt.rank
            )
            JOIN temp_gpad ON
                temp_gpad.digest = temp_gpad_new.digest
            JOIN dbxref ON
                dbxref.accession = temp_gpad.evidence_code
            JOIN db ON 
                db.db_id = dbxref.db_id
            JOIN cvterm ON
                cvterm.dbxref_id = dbxref.dbxref_id
            JOIN cv ON
                cv.cv_id = cvterm.cv_id
            AND db.name = 'ECO'
            AND cv.name = 'eco'

# The feature_cvterm_id is identical to previous one. The type_id comes from a custom cv namespace
# exclusive for GPAD. The value and rank comes from temp_gpad_qualifier after joining with temp_gpad_new.
[insert_feature_cvtermprop_qualifier]
    INSERT INTO feature_cvtermprop(feature_cvterm_id, type_id, value, rank)
        SELECT fcvt.feature_cvterm_id,
            (SELECT cvterm_id FROM cvterm JOIN cv 
                ON cv.cv_id = cvterm.cv_id
                WHERE cv.name = $1
                AND cvterm.name = 'qualifier'
            ),
            tgq.qualifier,
            tgq.rank
            JOIN temp_gpad_new ON 
            (
                temp_gpad_new.feature_id = fcvt.feature_id
                AND
                temp_gpad_new.cvterm_id = fcvt.cvterm_id
                AND 
                temp_gpad_new.pub_id = fcvt.pub_id
                AND
                temp_gpad_new.rank = fcvt.rank
            )
            JOIN temp_gpad_qualifier tgq ON
                tgq.digest = temp_gpad_new.digest

# The data of value column comes from temp_gpad after joining with temp_gpad_new.
[insert_feature_cvtermprop_date]
    INSERT INTO feature_cvtermprop(feature_cvterm_id, type_id, value)
        SELECT fcvt.feature_cvterm_id,
            (SELECT cvterm_id FROM cvterm JOIN cv 
                ON cv.cv_id = cvterm.cv_id
                WHERE cv.name = $1
                AND cvterm.name = 'date'
            ),
            temp_gpad.date_curated 
            FROM feature_cvterm fcvt 
            JOIN temp_gpad_new ON 
            (
                temp_gpad_new.feature_id = fcvt.feature_id
                AND
                temp_gpad_new.cvterm_id = fcvt.cvterm_id
                AND 
                temp_gpad_new.pub_id = fcvt.pub_id
                AND
                temp_gpad_new.rank = fcvt.rank
            )
            JOIN temp_gpad ON
                temp_gpad.digest = temp_gpad_new.digest


# The data of value column comes from temp_gpad after joining with temp_gpad_new.
[insert_feature_cvtermprop_assigned_by]
    INSERT INTO feature_cvtermprop(feature_cvterm_id, type_id, value)
        SELECT fcvt.feature_cvterm_id,
            (SELECT cvterm_id FROM cvterm JOIN cv 
                ON cv.cv_id = cvterm.cv_id
                WHERE cv.name = $1
                AND cvterm.name = 'source'
            ),
            temp_gpad.assigned_by 
            FROM feature_cvterm fcvt 
            JOIN temp_gpad_new ON 
            (
                temp_gpad_new.feature_id = fcvt.feature_id
                AND
                temp_gpad_new.cvterm_id = fcvt.cvterm_id
                AND 
                temp_gpad_new.pub_id = fcvt.pub_id
                AND
                temp_gpad_new.rank = fcvt.rank
            )
            JOIN temp_gpad ON
                temp_gpad.digest = temp_gpad_new.digest
 

[insert_feature_cvtermprop_withfrom]
    INSERT INTO feature_cvtermprop(feature_cvterm_id, type_id, value, rank)
        SELECT fcvt.feature_cvterm_id,
            (SELECT cvterm_id FROM cvterm JOIN cv 
                ON cv.cv_id = cvterm.cv_id
                WHERE cv.name = $1
                AND cvterm.name = 'with'
            ),
            tgw.withfrom,
            tgw.rank
            JOIN temp_gpad_new ON 
            (
                temp_gpad_new.feature_id = fcvt.feature_id
                AND
                temp_gpad_new.cvterm_id = fcvt.cvterm_id
                AND 
                temp_gpad_new.pub_id = fcvt.pub_id
                AND
                temp_gpad_new.rank = fcvt.rank
            )
            JOIN temp_gpad_withfrom tgw ON
                tgw.digest = temp_gpad_new.digest

[insert_feature_cvterm_pub_reference]
    INSERT INTO feature_cvterm_pub(feature_cvterm_id,pub_id)
        SELECT fcvt.feature_cvterm_id,pub.pub_id
            FROM feature_cvterm fcvt 
            JOIN temp_gpad_new ON 
            (
                temp_gpad_new.feature_id = fcvt.feature_id
                AND
                temp_gpad_new.cvterm_id = fcvt.cvterm_id
                AND 
                temp_gpad_new.pub_id = fcvt.pub_id
                AND
                temp_gpad_new.rank = fcvt.rank
            )
            JOIN temp_gpad_reference ON
                temp_gpad_reference.digest = temp_gpad_new.digest
            JOIN pub ON (
                pub.uniquename = temp_gpad_reference.publication_id
                AND
                pub.pubplace = temp_gpad_reference.pubplace
            )
